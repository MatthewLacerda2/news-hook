"""initial

Revision ID: 17a16ffb1457
Revises: 
Create Date: 2025-05-27 02:54:16.633959

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector


# revision identifiers, used by Alembic.
revision: str = '17a16ffb1457'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create the vector extension first
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agent_controllers',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('api_key', sa.String(), nullable=False),
    sa.Column('google_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('credit_balance', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('api_key'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('google_id')
    )
    op.create_table('api_sources',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('headers', sa.JSON(), nullable=True),
    sa.Column('query_params', sa.JSON(), nullable=True),
    sa.Column('request_body', sa.JSON(), nullable=True),
    sa.Column('request_seconds_interval', sa.Integer(), nullable=False),
    sa.Column('last_requested_at', sa.DateTime(), nullable=True),
    sa.Column('num_requests', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('llm_models',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('input_token_price', sa.Float(), nullable=False),
    sa.Column('output_token_price', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('model_name')
    )
    op.create_table('webhook_sources',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('endpoint_path', sa.String(), nullable=False),
    sa.Column('secret_key', sa.String(), nullable=False),
    sa.Column('schema_format', sa.JSON(), nullable=True),
    sa.Column('validation_rules', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('num_events', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('endpoint_path')
    )
    op.create_table('webscrape_sources',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('scrape_seconds_interval', sa.Integer(), nullable=False),
    sa.Column('last_scraped_at', sa.DateTime(), nullable=True),
    sa.Column('headers', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('num_scrapes', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('alert_prompts',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('agent_controller_id', sa.String(length=36), nullable=False),
    sa.Column('prompt', sa.String(), nullable=False),
    sa.Column('http_method', sa.Enum('POST', 'PUT', 'PATCH', name='httpmethod'), nullable=False),
    sa.Column('http_url', sa.String(), nullable=False),
    sa.Column('http_headers', sa.JSON(), nullable=True),
    sa.Column('payload_format', sa.JSON(), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('keywords', sa.JSON(), nullable=False),
    sa.Column('prompt_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'TRIGGERED', 'CANCELLED', 'WARNED', 'EXPIRED', name='alertstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('llm_model', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['agent_controller_id'], ['agent_controllers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_created_at', 'alert_prompts', ['created_at'], unique=False)
    op.create_index('idx_prompt_embedding_cosine', 'alert_prompts', ['prompt_embedding'], unique=False, postgresql_using='ivfflat', postgresql_ops={'prompt_embedding': 'vector_cosine_ops'})
    op.create_table('monitored_data',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('source', sa.Enum('WEBHOOK', 'WEBSCRAPE', 'API', 'YOUTUBE', 'USER_DOCUMENT', name='datasource'), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('content_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=True),
    sa.Column('monitored_datetime', sa.DateTime(), nullable=False),
    sa.Column('webhook_source_id', sa.String(length=36), nullable=True),
    sa.Column('api_source_id', sa.String(length=36), nullable=True),
    sa.Column('webscrape_source_id', sa.String(length=36), nullable=True),
    sa.Column('agent_controller_id', sa.String(length=36), nullable=True),
    sa.ForeignKeyConstraint(['agent_controller_id'], ['agent_controllers.id'], ),
    sa.ForeignKeyConstraint(['api_source_id'], ['api_sources.id'], ),
    sa.ForeignKeyConstraint(['webhook_source_id'], ['webhook_sources.id'], ),
    sa.ForeignKeyConstraint(['webscrape_source_id'], ['webscrape_sources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_content_embedding_cosine', 'monitored_data', ['content_embedding'], unique=False, postgresql_using='ivfflat', postgresql_ops={'content_embedding': 'vector_cosine_ops'})
    op.create_index('idx_monitored_datetime', 'monitored_data', ['monitored_datetime'], unique=False)
    op.create_table('alert_events',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('alert_prompt_id', sa.String(length=36), nullable=False),
    sa.Column('scraped_data_id', sa.String(length=36), nullable=False),
    sa.Column('triggered_at', sa.DateTime(), nullable=False),
    sa.Column('exception', sa.String(), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('input_price', sa.Float(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('output_price', sa.Float(), nullable=False),
    sa.Column('structured_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['alert_prompt_id'], ['alert_prompts.id'], ),
    sa.ForeignKeyConstraint(['scraped_data_id'], ['monitored_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_triggered_at', 'alert_events', ['triggered_at'], unique=False)
    op.create_table('llm_validations',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('prompt_id', sa.String(length=36), nullable=True),
    sa.Column('prompt', sa.String(length=255), nullable=False),
    sa.Column('reason', sa.String(length=128), nullable=False),
    sa.Column('approval', sa.Boolean(), nullable=False),
    sa.Column('chance_score', sa.Float(), nullable=False),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('input_price', sa.Float(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('output_price', sa.Float(), nullable=False),
    sa.Column('llm_id', sa.String(length=36), nullable=False),
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['llm_id'], ['llm_models.id'], ),
    sa.ForeignKeyConstraint(['prompt_id'], ['alert_prompts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('llm_verifications',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('alert_prompt_id', sa.String(length=36), nullable=False),
    sa.Column('approval', sa.Boolean(), nullable=False),
    sa.Column('chance_score', sa.Float(), nullable=False),
    sa.Column('llm_model', sa.String(), nullable=False),
    sa.Column('input_tokens_count', sa.Integer(), nullable=False),
    sa.Column('input_tokens_price', sa.Float(), nullable=False),
    sa.Column('output_tokens_count', sa.Integer(), nullable=False),
    sa.Column('output_tokens_price', sa.Float(), nullable=False),
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['alert_prompt_id'], ['alert_prompts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('llm_verifications')
    op.drop_table('llm_validations')
    op.drop_index('idx_triggered_at', table_name='alert_events')
    op.drop_table('alert_events')
    op.drop_index('idx_monitored_datetime', table_name='monitored_data')
    op.drop_index('idx_content_embedding_cosine', table_name='monitored_data', postgresql_using='ivfflat', postgresql_ops={'content_embedding': 'vector_cosine_ops'})
    op.drop_table('monitored_data')
    op.drop_index('idx_prompt_embedding_cosine', table_name='alert_prompts', postgresql_using='ivfflat', postgresql_ops={'prompt_embedding': 'vector_cosine_ops'})
    op.drop_index('idx_created_at', table_name='alert_prompts')
    op.drop_table('alert_prompts')
    op.drop_table('webscrape_sources')
    op.drop_table('webhook_sources')
    op.drop_table('llm_models')
    op.drop_table('api_sources')
    op.drop_table('agent_controllers')
    # ### end Alembic commands ###
